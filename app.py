# Telegram-–±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ñ–µ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã (Geosearch API)
# –¢—Ä–µ–±—É–µ—Ç—Å—è API-–∫–ª—é—á –æ—Ç –Ø–Ω–¥–µ–∫—Å.–û–±–ª–∞–∫–∞

# === –°–µ–∫—Ü–∏—è 1: –ò–º–ø–æ—Ä—Ç—ã ===
import os
import logging
import signal
import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
)

# === –°–µ–∫—Ü–∏—è 2: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TELEGRAM_TOKEN = os.getenv("8169183380:AAEp2I0Bb_Ljnzd4n8gMaDbVPLuFCi6BFDk")
YANDEX_API_KEY = os.getenv("AQVNznkv2cu-WerDTScb2YWsVBcomNIjvkzb9Tmy")
PORT = int(os.environ.get("PORT", 10000))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
WEBHOOK_URL = os.getenv("https://nearbyninjabot.onrender.com")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
MAX_RADIUS = 5000
MIN_RADIUS = 100
MAX_RESULTS = 3

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
RADIUS, LOCATION = range(2)

# === –°–µ–∫—Ü–∏—è 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(name)

# === –°–µ–∫—Ü–∏—è 4: –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ ===
class YandexCafeBot:
    def init(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
        self.updater = Updater(TELEGRAM_TOKEN, use_context=True)
        self.session = requests.Session()

    # === –°–µ–∫—Ü–∏—è 5: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
    def start(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
            "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∫–∞—Ñ–µ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /findcafe —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫",
            reply_markup=ReplyKeyboardRemove()
        )

    def find_cafe(self, update: Update, context: CallbackContext) -> int:
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞"""
        update.message.reply_text(
            f"üìè –í–≤–µ–¥–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö ({MIN_RADIUS}-{MAX_RADIUS}):",
            reply_markup=ReplyKeyboardRemove()
        )
        return RADIUS

    # === –°–µ–∫—Ü–∏—è 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ===
    def receive_radius(self, update: Update, context: CallbackContext) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞"""
        try:
            radius = int(update.message.text)
            if not (MIN_RADIUS <= radius <= MAX_RADIUS):
                raise ValueError
                
            context.user_data["radius"] = radius
            return self._request_location(update)
            
        except ValueError:
            update.message.reply_text(
                f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–¥–∏—É—Å! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_RADIUS} –¥–æ {MAX_RADIUS}:"
            )
            return RADIUS

    def _request_location(self, update: Update) -> int:
        """–ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        location_keyboard = ReplyKeyboardMarkup(
            [[{"text": "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", "request_location": True}]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        update.message.reply_text(
            "‚úÖ –†–∞–¥–∏—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=location_keyboard
        )
        return LOCATION

    # === –°–µ–∫—Ü–∏—è 7: –†–∞–±–æ—Ç–∞ —Å API –Ø–Ω–¥–µ–∫—Å ===
    def receive_location(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        try:
            location = update.message.location
            lat, lon = location.latitude, location.longitude
            radius = context.user_data.get("radius", 1000)

            # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API
            cafes = self._get_yandex_cafes(lon, lat, radius)
            
            if not cafes:
                raise ValueError("–ö–∞—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
            return self._send_results(update, cafes, radius)
            
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
            update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            update.message.reply_text("üòû –í —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ –∫–∞—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            
        return ConversationHandler.END
def _get_yandex_cafes(self, lon: float, lat: float, radius: int) -> list:
        """–ó–∞–ø—Ä–æ—Å –∫ API –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç"""
        url = "https://search-maps.yandex.ru/v1/"
        params = {
            "apikey": YANDEX_API_KEY,
            "text": "–∫–∞—Ñ–µ",
            "lang": "ru_RU",
            "ll": f"{lon},{lat}",
            "spn": f"{(radius / 1000) * 0.009}",  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ—Ç—Ä–æ–≤ –≤ –≥—Ä–∞–¥—É—Å—ã
            "rspn": 1,
            "results": MAX_RESULTS,
            "type": "biz"
        }
        
        response = self.session.get(url, params=params, timeout=10).json()
        
        if "error" in response:
            raise Exception(f"–û—à–∏–±–∫–∞ API: {response.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
        return response.get("features", [])[:MAX_RESULTS]

# === –°–µ–∫—Ü–∏—è 8: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
def _send_results(self, update: Update, cafes: list, radius: int) -> int:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        results = []
    
for cafe in cafes:
        props = cafe.get("properties", {})
        meta = props.get("CompanyMetaData", {})
        name = meta.get("name", "–ö–∞—Ñ–µ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        address = meta.get("address", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
        rating = props.get("rating", "–Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫")
        lon, lat = cafe["geometry"]["coordinates"]
        url = f"https://yandex.ru/maps/?ll={lon}%2C{lat}&z=17&pt={lon},{lat}"
        
        results.append(
            f"‚òïÔ∏è <b>{name}</b>\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
            f"üìå –ê–¥—Ä–µ—Å: {address}\n"
            f"üåê –°—Å—ã–ª–∫–∞: {url}"
        )

update.message.reply_html(
        f"üèÜ –¢–æ–ø {len(results)} –±–ª–∏–∂–∞–π—à–∏—Ö –∫–∞—Ñ–µ –≤ —Ä–∞–¥–∏—É—Å–µ {radius} –º:\n\n" + "\n\n".join(results),
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

    # === –°–µ–∫—Ü–∏—è 9: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º ===
def cancel(self, update: Update, context: CallbackContext) -> int:
        """–û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞"""
        update.message.reply_text(
            "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

def graceful_shutdown(self, signum, frame):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        self.updater.stop()
        self.session.close()
        logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        exit(0)

def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        dispatcher = self.updater.dispatcher

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('findcafe', self.find_cafe)],
            states={
                RADIUS: [MessageHandler(Filters.text & ~Filters.command, self.receive_radius)],
                LOCATION: [MessageHandler(Filters.location, self.receive_location)],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
        )

        dispatcher.add_handler(CommandHandler("start", self.start))
        dispatcher.add_handler(conv_handler)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.graceful_shutdown)
        signal.signal(signal.SIGTERM, self.graceful_shutdown)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
        self.updater.start_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TELEGRAM_TOKEN,
            webhook_url=f"{https://nearbyninjabot.onrender.com}/{8169183380:AAEp2I0Bb_Ljnzd4n8gMaDbVPLuFCi6BFDk}"
        )

        logger.info("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        self.updater.idle()

# === –°–µ–∫—Ü–∏—è 10: –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if name == 'main':
    bot = YandexCafeBot()
    bot.run()
